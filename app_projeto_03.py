import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# Configura√ß√£o inicial da p√°gina
st.set_page_config(page_title="Comportamento de Navega√ß√£o", layout="wide")

# Fun√ß√£o para carregar os dados
@st.cache_data
def load_data():
    return pd.read_csv(r"C:\Users\User\Documents\EBAC\Cientista de Dados\Profiss√£o Cientista de Dados\M√≥dulo 31_Streamlit V\Exerc√≠cio 02\online_shoppers_intention.csv")

# Fun√ß√£o para realizar o pr√©-processamento
def preprocess_data(df):
    variaveis_navegacao = ['Administrative', 'Administrative_Duration', 
                           'Informational', 'Informational_Duration', 
                           'ProductRelated', 'ProductRelated_Duration']
    df[variaveis_navegacao] = df[variaveis_navegacao].fillna(df[variaveis_navegacao].mean())
    return df, variaveis_navegacao

# Carregando os dados
df = load_data()
df, variaveis_navegacao = preprocess_data(df)

    # T√≠tulo do App
st.title(" üìä Projeto 03: An√°lise do Comportamento de Navega√ß√£o e Perfil de Compra")
    
st.markdown("---")

st.markdown("""
Neste projeto vamos usar a base [online shoppers purchase intention](https://archive.ics.uci.edu/dataset/468/online+shoppers+purchasing+intention+dataset) de Sakar, C.O., Polat, S.O., Katircioglu, M. et al. Neural Comput & Applic (2018). [Link](https://link.springer.com/article/10.1007/s00521-018-3523-0).

A base trata de registros de 12.330 sess√µes de acesso a p√°ginas, cada sess√£o sendo de um √∫nico usu√°rio em um per√≠odo de 12 meses, para posteriormente estudarmos a rela√ß√£o entre o design da p√°gina e o perfil do cliente - "Ser√° que clientes com comportamento de navega√ß√£o diferentes possuem propens√£o a compra diferente?"

Nosso objetivo √© tentar agrupar os clientes conforme seu comportamento de navega√ß√£o entre p√°ginas administrativas, informativas e de produtos.
""")
    
st.markdown("---")
    
# Exibi√ß√£o inicial dos dados
if st.checkbox("Mostrar os primeiros dados"):
    st.write(df.head())

# An√°lise descritiva
st.header("An√°lise Descritiva")
st.write("Estat√≠sticas descritivas das vari√°veis relacionadas ao comportamento de navega√ß√£o:")
st.write(df[variaveis_navegacao].describe())

# Visualiza√ß√£o da distribui√ß√£o das vari√°veis
st.subheader("Distribui√ß√£o das vari√°veis de navega√ß√£o")
fig, ax = plt.subplots(2, 3, figsize=(12, 8))
for i, col in enumerate(variaveis_navegacao):
    sns.histplot(df[col], bins=20, kde=True, ax=ax[i // 3, i % 3])
    ax[i // 3, i % 3].set_title(f'Distribui√ß√£o de {col}')
plt.tight_layout()
st.pyplot(fig)

# Agrupamento - Escolha do n√∫mero de clusters
st.header("Agrupamento de Usu√°rios")
st.write("Os dados s√£o escalados antes do agrupamento para padronizar as vari√°veis.")
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df[variaveis_navegacao])

# M√©todo do Cotovelo
st.subheader("M√©todo do Cotovelo")
if st.button("Calcular Cotovelo"):
    sse = []
    k_values = range(1, 11)
    for k in k_values:
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(df_scaled)
        sse.append(kmeans.inertia_)
    fig, ax = plt.subplots()
    ax.plot(k_values, sse, marker='o')
    ax.set_xlabel("N√∫mero de Clusters")
    ax.set_ylabel("Soma dos Erros Quadrados (SSE)")
    ax.set_title("M√©todo do Cotovelo")
    st.pyplot(fig)

# Coeficiente de Silhueta
st.subheader("Coeficiente de Silhueta")
if st.button("Calcular Silhueta"):
    silhouette_scores = []
    for k in range(2, 11):
        kmeans = KMeans(n_clusters=k, random_state=42)
        labels = kmeans.fit_predict(df_scaled)
        silhouette_scores.append(silhouette_score(df_scaled, labels, sample_size=2000, random_state=42))
    fig, ax = plt.subplots()
    ax.plot(range(2, 11), silhouette_scores, marker='o')
    ax.set_xlabel("N√∫mero de Clusters")
    ax.set_ylabel("Coeficiente de Silhueta")
    ax.set_title("Coeficiente de Silhueta")
    st.pyplot(fig)

# Escolha do n√∫mero de clusters
num_clusters = st.slider("Escolha o n√∫mero de clusters para an√°lise", min_value=2, max_value=10, value=3)

# Implementa√ß√£o do K-Means com clusters escolhidos
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
df['cluster'] = kmeans.fit_predict(df_scaled)

# An√°lise descritiva dos clusters
st.subheader(f"An√°lise Descritiva para {num_clusters} Clusters")
cluster_means = df.groupby('cluster')[variaveis_navegacao].mean()
st.write(cluster_means)

# Visualiza√ß√£o dos clusters
st.subheader("Visualiza√ß√£o das M√©dias por Cluster")
fig, ax = plt.subplots()
cluster_means.plot(kind='bar', ax=ax)
ax.set_title(f'M√©dias das Vari√°veis de Navega√ß√£o por Cluster ({num_clusters} Grupos)')
ax.set_ylabel("M√©dia")
ax.set_xlabel("Cluster")
plt.xticks(rotation=0)
st.pyplot(fig)

# Avalia√ß√£o de propens√£o √† compra
st.header("Avalia√ß√£o de Propens√£o √† Compra")
st.write("An√°lise de vari√°veis fora do escopo (BounceRates e Revenue) para os clusters:")
extra_analysis = df.groupby('cluster')[['BounceRates', 'Revenue']].mean()
st.write(extra_analysis)

# Visualiza√ß√£o de BounceRates e Revenue
st.subheader("Visualiza√ß√£o de BounceRates e Revenue")
fig, ax = plt.subplots()
extra_analysis.plot(kind='bar', ax=ax)
ax.set_title("BounceRates e Revenue por Cluster")
ax.set_ylabel("M√©dia")
ax.set_xlabel("Cluster")
plt.xticks(rotation=0)
st.pyplot(fig)

# Conclus√£o
st.header("Conclus√£o")
st.write("Com base nos agrupamentos, avalie os clusters mais propensos √† compra (maior m√©dia em Revenue).")

# by Victor Resende
st.markdown("---")
st.write("by üìä **Victor Resende**")

